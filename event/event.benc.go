// Code generated by bencgen golang. DO NOT EDIT.
// source: event.benc

package event

import (
    "github.com/deneonet/benc/std"
    "github.com/deneonet/benc/impl/gen"
)

// Struct - BencTag
type BencTag struct {
    Tag [][]byte
}

// Reserved Ids - BencTag
var bencTagRIds = []uint16{}

// Size - BencTag
func (bencTag *BencTag) Size() int {
    return bencTag.size(0)
}

// Nested Size - BencTag
func (bencTag *BencTag) size(id uint16) (s int) {
    s += bstd.SizeSlice(bencTag.Tag, bstd.SizeBytes) + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - BencTag
func (bencTag *BencTag) SizePlain() (s int) {
    s += bstd.SizeSlice(bencTag.Tag, bstd.SizeBytes)
    return
}

// Marshal - BencTag
func (bencTag *BencTag) Marshal(b []byte) {
    bencTag.marshal(0, b, 0)
}

// Nested Marshal - BencTag
func (bencTag *BencTag) marshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 1)
    n = bstd.MarshalSlice(n, b, bencTag.Tag, bstd.MarshalBytes)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - BencTag
func (bencTag *BencTag) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalSlice(n, b, bencTag.Tag, bstd.MarshalBytes)
    return n
}

// Unmarshal - BencTag
func (bencTag *BencTag) Unmarshal(b []byte) (err error) {
    _, err = bencTag.unmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - BencTag
func (bencTag *BencTag) unmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencTagRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencTag.Tag, err = bstd.UnmarshalSlice[[]byte](n, b, bstd.UnmarshalBytes); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - BencTag
func (bencTag *BencTag) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, bencTag.Tag, err = bstd.UnmarshalSlice[[]byte](n, b, bstd.UnmarshalBytes); err != nil {
        return
    }
    return
}

// Struct - BencEvent
type BencEvent struct {
    Id []byte
    Pubkey []byte
    CreatedAt int64
    Kind int32
    Tags []BencTag
    Content []byte
    Sig []byte
}

// Reserved Ids - BencEvent
var bencEventRIds = []uint16{}

// Size - BencEvent
func (bencEvent *BencEvent) Size() int {
    return bencEvent.size(0)
}

// Nested Size - BencEvent
func (bencEvent *BencEvent) size(id uint16) (s int) {
    s += bstd.SizeSlice(bencEvent.Id, bstd.SizeByte) + 2
    s += bstd.SizeSlice(bencEvent.Pubkey, bstd.SizeByte) + 2
    s += bstd.SizeInt64() + 2
    s += bstd.SizeInt32() + 2
    s += bstd.SizeSlice(bencEvent.Tags, func (s BencTag) int { return s.SizePlain() }) + 2
    s += bstd.SizeSlice(bencEvent.Content, bstd.SizeByte) + 2
    s += bstd.SizeSlice(bencEvent.Sig, bstd.SizeByte) + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - BencEvent
func (bencEvent *BencEvent) SizePlain() (s int) {
    s += bstd.SizeSlice(bencEvent.Id, bstd.SizeByte)
    s += bstd.SizeSlice(bencEvent.Pubkey, bstd.SizeByte)
    s += bstd.SizeInt64()
    s += bstd.SizeInt32()
    s += bstd.SizeSlice(bencEvent.Tags, func (s BencTag) int { return s.SizePlain() })
    s += bstd.SizeSlice(bencEvent.Content, bstd.SizeByte)
    s += bstd.SizeSlice(bencEvent.Sig, bstd.SizeByte)
    return
}

// Marshal - BencEvent
func (bencEvent *BencEvent) Marshal(b []byte) {
    bencEvent.marshal(0, b, 0)
}

// Nested Marshal - BencEvent
func (bencEvent *BencEvent) marshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 1)
    n = bstd.MarshalSlice(n, b, bencEvent.Id, bstd.MarshalByte)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 2)
    n = bstd.MarshalSlice(n, b, bencEvent.Pubkey, bstd.MarshalByte)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed64, 3)
    n = bstd.MarshalInt64(n, b, bencEvent.CreatedAt)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed32, 4)
    n = bstd.MarshalInt32(n, b, bencEvent.Kind)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 5)
    n = bstd.MarshalSlice(n, b, bencEvent.Tags, func (n int, b []byte, s BencTag) int { return s.MarshalPlain(n, b) })
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 6)
    n = bstd.MarshalSlice(n, b, bencEvent.Content, bstd.MarshalByte)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 7)
    n = bstd.MarshalSlice(n, b, bencEvent.Sig, bstd.MarshalByte)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - BencEvent
func (bencEvent *BencEvent) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalSlice(n, b, bencEvent.Id, bstd.MarshalByte)
    n = bstd.MarshalSlice(n, b, bencEvent.Pubkey, bstd.MarshalByte)
    n = bstd.MarshalInt64(n, b, bencEvent.CreatedAt)
    n = bstd.MarshalInt32(n, b, bencEvent.Kind)
    n = bstd.MarshalSlice(n, b, bencEvent.Tags, func (n int, b []byte, s BencTag) int { return s.MarshalPlain(n, b) })
    n = bstd.MarshalSlice(n, b, bencEvent.Content, bstd.MarshalByte)
    n = bstd.MarshalSlice(n, b, bencEvent.Sig, bstd.MarshalByte)
    return n
}

// Unmarshal - BencEvent
func (bencEvent *BencEvent) Unmarshal(b []byte) (err error) {
    _, err = bencEvent.unmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - BencEvent
func (bencEvent *BencEvent) unmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.Id, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 2); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.Pubkey, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 3); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.CreatedAt, err = bstd.UnmarshalInt64(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 4); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.Kind, err = bstd.UnmarshalInt32(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 5); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.Tags, err = bstd.UnmarshalSlice[BencTag](n, b, func (n int, b []byte, s *BencTag) (int, error) { return s.UnmarshalPlain(n, b) }); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 6); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.Content, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, bencEventRIds, 7); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, bencEvent.Sig, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - BencEvent
func (bencEvent *BencEvent) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, bencEvent.Id, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
        return
    }
    if n, bencEvent.Pubkey, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
        return
    }
    if n, bencEvent.CreatedAt, err = bstd.UnmarshalInt64(n, b); err != nil {
        return
    }
    if n, bencEvent.Kind, err = bstd.UnmarshalInt32(n, b); err != nil {
        return
    }
    if n, bencEvent.Tags, err = bstd.UnmarshalSlice[BencTag](n, b, func (n int, b []byte, s *BencTag) (int, error) { return s.UnmarshalPlain(n, b) }); err != nil {
        return
    }
    if n, bencEvent.Content, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
        return
    }
    if n, bencEvent.Sig, err = bstd.UnmarshalSlice[byte](n, b, bstd.UnmarshalByte); err != nil {
        return
    }
    return
}

