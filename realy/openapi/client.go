// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBackup request
	GetBackup(ctx context.Context, params *GetBackupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDocumentationEndpoint request
	GetDocumentationEndpoint(ctx context.Context, endpoint string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEventId request
	GetEventId(ctx context.Context, id string, params *GetEventIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEventsWithBody request with any body
	PostEventsWithBody(ctx context.Context, params *PostEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEvents(ctx context.Context, params *PostEventsParams, body PostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostExportWithBody request with any body
	PostExportWithBody(ctx context.Context, params *PostExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostExport(ctx context.Context, params *PostExportParams, body PostExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFilterWithBody request with any body
	PostFilterWithBody(ctx context.Context, params *PostFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFilter(ctx context.Context, params *PostFilterParams, body PostFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFulltextWithBody request with any body
	PostFulltextWithBody(ctx context.Context, params *PostFulltextParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFulltext(ctx context.Context, params *PostFulltextParams, body PostFulltextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostImportWithBody request with any body
	PostImportWithBody(ctx context.Context, params *PostImportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNuke request
	GetNuke(ctx context.Context, params *GetNukeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPermissions request
	GetPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPolicy request
	GetPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRelayWithBody request with any body
	PostRelayWithBody(ctx context.Context, params *PostRelayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRelay(ctx context.Context, params *PostRelayParams, body PostRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetShutdown request
	GetShutdown(ctx context.Context, params *GetShutdownParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStoreWithBody request with any body
	PostStoreWithBody(ctx context.Context, params *PostStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStore(ctx context.Context, params *PostStoreParams, body PostStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSubscribeWithBody request with any body
	PostSubscribeWithBody(ctx context.Context, params *PostSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSubscribe(ctx context.Context, params *PostSubscribeParams, body PostSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBackup(ctx context.Context, params *GetBackupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBackupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDocumentationEndpoint(ctx context.Context, endpoint string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDocumentationEndpointRequest(c.Server, endpoint)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEventId(ctx context.Context, id string, params *GetEventIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEventIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEventsWithBody(ctx context.Context, params *PostEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEventsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEvents(ctx context.Context, params *PostEventsParams, body PostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEventsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExportWithBody(ctx context.Context, params *PostExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostExport(ctx context.Context, params *PostExportParams, body PostExportJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostExportRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilterWithBody(ctx context.Context, params *PostFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilterRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFilter(ctx context.Context, params *PostFilterParams, body PostFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFilterRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulltextWithBody(ctx context.Context, params *PostFulltextParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulltextRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFulltext(ctx context.Context, params *PostFulltextParams, body PostFulltextJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFulltextRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostImportWithBody(ctx context.Context, params *PostImportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostImportRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNuke(ctx context.Context, params *GetNukeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNukeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPermissions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPolicy(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPolicyRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelayWithBody(ctx context.Context, params *PostRelayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelayRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRelay(ctx context.Context, params *PostRelayParams, body PostRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRelayRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetShutdown(ctx context.Context, params *GetShutdownParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetShutdownRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoreWithBody(ctx context.Context, params *PostStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoreRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStore(ctx context.Context, params *PostStoreParams, body PostStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoreRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSubscribeWithBody(ctx context.Context, params *PostSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSubscribeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSubscribe(ctx context.Context, params *PostSubscribeParams, body PostSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSubscribeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBackupRequest generates requests for GetBackup
func NewGetBackupRequest(server string, params *GetBackupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/backup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetDocumentationEndpointRequest generates requests for GetDocumentationEndpoint
func NewGetDocumentationEndpointRequest(server string, endpoint string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpoint", runtime.ParamLocationPath, endpoint)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/documentation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEventIdRequest generates requests for GetEventId
func NewGetEventIdRequest(server string, id string, params *GetEventIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/event/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

	}

	return req, nil
}

// NewPostEventsRequest calls the generic PostEvents builder with application/json body
func NewPostEventsRequest(server string, params *PostEventsParams, body PostEventsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEventsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostEventsRequestWithBody generates requests for PostEvents with any type of body
func NewPostEventsRequestWithBody(server string, params *PostEventsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/events")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

	}

	return req, nil
}

// NewPostExportRequest calls the generic PostExport builder with application/json body
func NewPostExportRequest(server string, params *PostExportParams, body PostExportJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostExportRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostExportRequestWithBody generates requests for PostExport with any type of body
func NewPostExportRequestWithBody(server string, params *PostExportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostFilterRequest calls the generic PostFilter builder with application/json body
func NewPostFilterRequest(server string, params *PostFilterParams, body PostFilterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFilterRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFilterRequestWithBody generates requests for PostFilter with any type of body
func NewPostFilterRequestWithBody(server string, params *PostFilterParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/filter")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Since != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Until != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

	}

	return req, nil
}

// NewPostFulltextRequest calls the generic PostFulltext builder with application/json body
func NewPostFulltextRequest(server string, params *PostFulltextParams, body PostFulltextJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFulltextRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostFulltextRequestWithBody generates requests for PostFulltext with any type of body
func NewPostFulltextRequestWithBody(server string, params *PostFulltextParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/fulltext")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Search != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "search", runtime.ParamLocationQuery, *params.Search); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Since != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Until != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, *params.Until); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Order != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order", runtime.ParamLocationQuery, *params.Order); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

	}

	return req, nil
}

// NewPostImportRequestWithBody generates requests for PostImport with any type of body
func NewPostImportRequestWithBody(server string, params *PostImportParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetNukeRequest generates requests for GetNuke
func NewGetNukeRequest(server string, params *GetNukeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nuke")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetPermissionsRequest generates requests for GetPermissions
func NewGetPermissionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPolicyRequest generates requests for GetPolicy
func NewGetPolicyRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRelayRequest calls the generic PostRelay builder with application/json body
func NewPostRelayRequest(server string, params *PostRelayParams, body PostRelayJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRelayRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostRelayRequestWithBody generates requests for PostRelay with any type of body
func NewPostRelayRequestWithBody(server string, params *PostRelayParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/relay")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

	}

	return req, nil
}

// NewGetShutdownRequest generates requests for GetShutdown
func NewGetShutdownRequest(server string, params *GetShutdownParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostStoreRequest calls the generic PostStore builder with application/json body
func NewPostStoreRequest(server string, params *PostStoreParams, body PostStoreJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStoreRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostStoreRequestWithBody generates requests for PostStore with any type of body
func NewPostStoreRequestWithBody(server string, params *PostStoreParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

	}

	return req, nil
}

// NewPostSubscribeRequest calls the generic PostSubscribe builder with application/json body
func NewPostSubscribeRequest(server string, params *PostSubscribeParams, body PostSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSubscribeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSubscribeRequestWithBody generates requests for PostSubscribe with any type of body
func NewPostSubscribeRequestWithBody(server string, params *PostSubscribeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept", runtime.ParamLocationHeader, params.Accept)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept", headerParam0)

		if params.Authorization != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Authorization", headerParam1)
		}

		var headerParam2 string

		headerParam2, err = runtime.StyleParamWithLocation("simple", false, "Upgrade", runtime.ParamLocationHeader, params.Upgrade)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Upgrade", headerParam2)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBackupWithResponse request
	GetBackupWithResponse(ctx context.Context, params *GetBackupParams, reqEditors ...RequestEditorFn) (*GetBackupResponse, error)

	// GetDocumentationEndpointWithResponse request
	GetDocumentationEndpointWithResponse(ctx context.Context, endpoint string, reqEditors ...RequestEditorFn) (*GetDocumentationEndpointResponse, error)

	// GetEventIdWithResponse request
	GetEventIdWithResponse(ctx context.Context, id string, params *GetEventIdParams, reqEditors ...RequestEditorFn) (*GetEventIdResponse, error)

	// PostEventsWithBodyWithResponse request with any body
	PostEventsWithBodyWithResponse(ctx context.Context, params *PostEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEventsResponse, error)

	PostEventsWithResponse(ctx context.Context, params *PostEventsParams, body PostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEventsResponse, error)

	// PostExportWithBodyWithResponse request with any body
	PostExportWithBodyWithResponse(ctx context.Context, params *PostExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExportResponse, error)

	PostExportWithResponse(ctx context.Context, params *PostExportParams, body PostExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExportResponse, error)

	// PostFilterWithBodyWithResponse request with any body
	PostFilterWithBodyWithResponse(ctx context.Context, params *PostFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilterResponse, error)

	PostFilterWithResponse(ctx context.Context, params *PostFilterParams, body PostFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilterResponse, error)

	// PostFulltextWithBodyWithResponse request with any body
	PostFulltextWithBodyWithResponse(ctx context.Context, params *PostFulltextParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulltextResponse, error)

	PostFulltextWithResponse(ctx context.Context, params *PostFulltextParams, body PostFulltextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulltextResponse, error)

	// PostImportWithBodyWithResponse request with any body
	PostImportWithBodyWithResponse(ctx context.Context, params *PostImportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostImportResponse, error)

	// GetNukeWithResponse request
	GetNukeWithResponse(ctx context.Context, params *GetNukeParams, reqEditors ...RequestEditorFn) (*GetNukeResponse, error)

	// GetPermissionsWithResponse request
	GetPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error)

	// GetPolicyWithResponse request
	GetPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error)

	// PostRelayWithBodyWithResponse request with any body
	PostRelayWithBodyWithResponse(ctx context.Context, params *PostRelayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelayResponse, error)

	PostRelayWithResponse(ctx context.Context, params *PostRelayParams, body PostRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelayResponse, error)

	// GetShutdownWithResponse request
	GetShutdownWithResponse(ctx context.Context, params *GetShutdownParams, reqEditors ...RequestEditorFn) (*GetShutdownResponse, error)

	// PostStoreWithBodyWithResponse request with any body
	PostStoreWithBodyWithResponse(ctx context.Context, params *PostStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoreResponse, error)

	PostStoreWithResponse(ctx context.Context, params *PostStoreParams, body PostStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoreResponse, error)

	// PostSubscribeWithBodyWithResponse request with any body
	PostSubscribeWithBodyWithResponse(ctx context.Context, params *PostSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSubscribeResponse, error)

	PostSubscribeWithResponse(ctx context.Context, params *PostSubscribeParams, body PostSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSubscribeResponse, error)
}

type GetBackupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetBackupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBackupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDocumentationEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetDocumentationEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDocumentationEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEventIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Event
}

// Status returns HTTPResponse.Status
func (r GetEventIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEventIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEventsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostEventsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEventsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostExportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostExportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostExportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFilterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFilterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFilterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFulltextResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostFulltextResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFulltextResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostImportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostImportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostImportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNukeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetNukeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNukeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthRequired *[][]string `json:"auth_required,omitempty"`
		Name         *string     `json:"name,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRelayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostRelayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRelayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetShutdownResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetShutdownResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetShutdownResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStoreResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostStoreResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStoreResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBackupWithResponse request returning *GetBackupResponse
func (c *ClientWithResponses) GetBackupWithResponse(ctx context.Context, params *GetBackupParams, reqEditors ...RequestEditorFn) (*GetBackupResponse, error) {
	rsp, err := c.GetBackup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBackupResponse(rsp)
}

// GetDocumentationEndpointWithResponse request returning *GetDocumentationEndpointResponse
func (c *ClientWithResponses) GetDocumentationEndpointWithResponse(ctx context.Context, endpoint string, reqEditors ...RequestEditorFn) (*GetDocumentationEndpointResponse, error) {
	rsp, err := c.GetDocumentationEndpoint(ctx, endpoint, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDocumentationEndpointResponse(rsp)
}

// GetEventIdWithResponse request returning *GetEventIdResponse
func (c *ClientWithResponses) GetEventIdWithResponse(ctx context.Context, id string, params *GetEventIdParams, reqEditors ...RequestEditorFn) (*GetEventIdResponse, error) {
	rsp, err := c.GetEventId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEventIdResponse(rsp)
}

// PostEventsWithBodyWithResponse request with arbitrary body returning *PostEventsResponse
func (c *ClientWithResponses) PostEventsWithBodyWithResponse(ctx context.Context, params *PostEventsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEventsResponse, error) {
	rsp, err := c.PostEventsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEventsResponse(rsp)
}

func (c *ClientWithResponses) PostEventsWithResponse(ctx context.Context, params *PostEventsParams, body PostEventsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEventsResponse, error) {
	rsp, err := c.PostEvents(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEventsResponse(rsp)
}

// PostExportWithBodyWithResponse request with arbitrary body returning *PostExportResponse
func (c *ClientWithResponses) PostExportWithBodyWithResponse(ctx context.Context, params *PostExportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostExportResponse, error) {
	rsp, err := c.PostExportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExportResponse(rsp)
}

func (c *ClientWithResponses) PostExportWithResponse(ctx context.Context, params *PostExportParams, body PostExportJSONRequestBody, reqEditors ...RequestEditorFn) (*PostExportResponse, error) {
	rsp, err := c.PostExport(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostExportResponse(rsp)
}

// PostFilterWithBodyWithResponse request with arbitrary body returning *PostFilterResponse
func (c *ClientWithResponses) PostFilterWithBodyWithResponse(ctx context.Context, params *PostFilterParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFilterResponse, error) {
	rsp, err := c.PostFilterWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilterResponse(rsp)
}

func (c *ClientWithResponses) PostFilterWithResponse(ctx context.Context, params *PostFilterParams, body PostFilterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFilterResponse, error) {
	rsp, err := c.PostFilter(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFilterResponse(rsp)
}

// PostFulltextWithBodyWithResponse request with arbitrary body returning *PostFulltextResponse
func (c *ClientWithResponses) PostFulltextWithBodyWithResponse(ctx context.Context, params *PostFulltextParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFulltextResponse, error) {
	rsp, err := c.PostFulltextWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulltextResponse(rsp)
}

func (c *ClientWithResponses) PostFulltextWithResponse(ctx context.Context, params *PostFulltextParams, body PostFulltextJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFulltextResponse, error) {
	rsp, err := c.PostFulltext(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFulltextResponse(rsp)
}

// PostImportWithBodyWithResponse request with arbitrary body returning *PostImportResponse
func (c *ClientWithResponses) PostImportWithBodyWithResponse(ctx context.Context, params *PostImportParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostImportResponse, error) {
	rsp, err := c.PostImportWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostImportResponse(rsp)
}

// GetNukeWithResponse request returning *GetNukeResponse
func (c *ClientWithResponses) GetNukeWithResponse(ctx context.Context, params *GetNukeParams, reqEditors ...RequestEditorFn) (*GetNukeResponse, error) {
	rsp, err := c.GetNuke(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNukeResponse(rsp)
}

// GetPermissionsWithResponse request returning *GetPermissionsResponse
func (c *ClientWithResponses) GetPermissionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error) {
	rsp, err := c.GetPermissions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPermissionsResponse(rsp)
}

// GetPolicyWithResponse request returning *GetPolicyResponse
func (c *ClientWithResponses) GetPolicyWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPolicyResponse, error) {
	rsp, err := c.GetPolicy(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPolicyResponse(rsp)
}

// PostRelayWithBodyWithResponse request with arbitrary body returning *PostRelayResponse
func (c *ClientWithResponses) PostRelayWithBodyWithResponse(ctx context.Context, params *PostRelayParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRelayResponse, error) {
	rsp, err := c.PostRelayWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelayResponse(rsp)
}

func (c *ClientWithResponses) PostRelayWithResponse(ctx context.Context, params *PostRelayParams, body PostRelayJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRelayResponse, error) {
	rsp, err := c.PostRelay(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRelayResponse(rsp)
}

// GetShutdownWithResponse request returning *GetShutdownResponse
func (c *ClientWithResponses) GetShutdownWithResponse(ctx context.Context, params *GetShutdownParams, reqEditors ...RequestEditorFn) (*GetShutdownResponse, error) {
	rsp, err := c.GetShutdown(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetShutdownResponse(rsp)
}

// PostStoreWithBodyWithResponse request with arbitrary body returning *PostStoreResponse
func (c *ClientWithResponses) PostStoreWithBodyWithResponse(ctx context.Context, params *PostStoreParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoreResponse, error) {
	rsp, err := c.PostStoreWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoreResponse(rsp)
}

func (c *ClientWithResponses) PostStoreWithResponse(ctx context.Context, params *PostStoreParams, body PostStoreJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoreResponse, error) {
	rsp, err := c.PostStore(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoreResponse(rsp)
}

// PostSubscribeWithBodyWithResponse request with arbitrary body returning *PostSubscribeResponse
func (c *ClientWithResponses) PostSubscribeWithBodyWithResponse(ctx context.Context, params *PostSubscribeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSubscribeResponse, error) {
	rsp, err := c.PostSubscribeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostSubscribeWithResponse(ctx context.Context, params *PostSubscribeParams, body PostSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSubscribeResponse, error) {
	rsp, err := c.PostSubscribe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSubscribeResponse(rsp)
}

// ParseGetBackupResponse parses an HTTP response from a GetBackupWithResponse call
func ParseGetBackupResponse(rsp *http.Response) (*GetBackupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBackupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetDocumentationEndpointResponse parses an HTTP response from a GetDocumentationEndpointWithResponse call
func ParseGetDocumentationEndpointResponse(rsp *http.Response) (*GetDocumentationEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDocumentationEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEventIdResponse parses an HTTP response from a GetEventIdWithResponse call
func ParseGetEventIdResponse(rsp *http.Response) (*GetEventIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEventIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Event
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEventsResponse parses an HTTP response from a PostEventsWithResponse call
func ParsePostEventsResponse(rsp *http.Response) (*PostEventsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEventsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostExportResponse parses an HTTP response from a PostExportWithResponse call
func ParsePostExportResponse(rsp *http.Response) (*PostExportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostExportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFilterResponse parses an HTTP response from a PostFilterWithResponse call
func ParsePostFilterResponse(rsp *http.Response) (*PostFilterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFilterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostFulltextResponse parses an HTTP response from a PostFulltextWithResponse call
func ParsePostFulltextResponse(rsp *http.Response) (*PostFulltextResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFulltextResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostImportResponse parses an HTTP response from a PostImportWithResponse call
func ParsePostImportResponse(rsp *http.Response) (*PostImportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostImportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNukeResponse parses an HTTP response from a GetNukeWithResponse call
func ParseGetNukeResponse(rsp *http.Response) (*GetNukeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNukeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPermissionsResponse parses an HTTP response from a GetPermissionsWithResponse call
func ParseGetPermissionsResponse(rsp *http.Response) (*GetPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthRequired *[][]string `json:"auth_required,omitempty"`
			Name         *string     `json:"name,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPolicyResponse parses an HTTP response from a GetPolicyWithResponse call
func ParseGetPolicyResponse(rsp *http.Response) (*GetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostRelayResponse parses an HTTP response from a PostRelayWithResponse call
func ParsePostRelayResponse(rsp *http.Response) (*PostRelayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRelayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetShutdownResponse parses an HTTP response from a GetShutdownWithResponse call
func ParseGetShutdownResponse(rsp *http.Response) (*GetShutdownResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetShutdownResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostStoreResponse parses an HTTP response from a PostStoreWithResponse call
func ParsePostStoreResponse(rsp *http.Response) (*PostStoreResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStoreResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSubscribeResponse parses an HTTP response from a PostSubscribeWithResponse call
func ParsePostSubscribeResponse(rsp *http.Response) (*PostSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
